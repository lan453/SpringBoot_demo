<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.example.springboot_demo.dao.mapper.TinstructorclassMapper">
  <resultMap id="BaseResultMap" type="com.example.springboot_demo.entity.Tinstructorclass">
    <id column="id" jdbcType="INTEGER" property="id" />
    <result column="instructorID" jdbcType="SMALLINT" property="instructorid" />
    <result column="classId" jdbcType="INTEGER" property="classid" />
    <result column="academicYearId" jdbcType="TINYINT" property="academicyearid" />
    <result column="term" jdbcType="CHAR" property="term" />
  </resultMap>
  <sql id="Example_Where_Clause">
    <where>
      <foreach collection="oredCriteria" item="criteria" separator="or">
        <if test="criteria.valid">
          <trim prefix="(" prefixOverrides="and" suffix=")">
            <foreach collection="criteria.criteria" item="criterion">
              <choose>
                <when test="criterion.noValue">
                  and ${criterion.condition}
                </when>
                <when test="criterion.singleValue">
                  and ${criterion.condition} #{criterion.value}
                </when>
                <when test="criterion.betweenValue">
                  and ${criterion.condition} #{criterion.value} and #{criterion.secondValue}
                </when>
                <when test="criterion.listValue">
                  and ${criterion.condition}
                  <foreach close=")" collection="criterion.value" item="listItem" open="(" separator=",">
                    #{listItem}
                  </foreach>
                </when>
              </choose>
            </foreach>
          </trim>
        </if>
      </foreach>
    </where>
  </sql>
  <sql id="Update_By_Example_Where_Clause">
    <where>
      <foreach collection="example.oredCriteria" item="criteria" separator="or">
        <if test="criteria.valid">
          <trim prefix="(" prefixOverrides="and" suffix=")">
            <foreach collection="criteria.criteria" item="criterion">
              <choose>
                <when test="criterion.noValue">
                  and ${criterion.condition}
                </when>
                <when test="criterion.singleValue">
                  and ${criterion.condition} #{criterion.value}
                </when>
                <when test="criterion.betweenValue">
                  and ${criterion.condition} #{criterion.value} and #{criterion.secondValue}
                </when>
                <when test="criterion.listValue">
                  and ${criterion.condition}
                  <foreach close=")" collection="criterion.value" item="listItem" open="(" separator=",">
                    #{listItem}
                  </foreach>
                </when>
              </choose>
            </foreach>
          </trim>
        </if>
      </foreach>
    </where>
  </sql>
  <sql id="Base_Column_List">
    id, instructorID, classId, academicYearId, term
  </sql>
  <select id="selectByExample" parameterType="com.example.springboot_demo.entity.TinstructorclassExample" resultMap="BaseResultMap">
    select
    <if test="distinct">
      distinct
    </if>
    <include refid="Base_Column_List" />
    from tinstructorclass
    <if test="_parameter != null">
      <include refid="Example_Where_Clause" />
    </if>
    <if test="orderByClause != null">
      order by ${orderByClause}
    </if>
  </select>
  <select id="selectByPrimaryKey" parameterType="java.lang.Integer" resultMap="BaseResultMap">
    select 
    <include refid="Base_Column_List" />
    from tinstructorclass
    where id = #{id,jdbcType=INTEGER}
  </select>
  <delete id="deleteByPrimaryKey" parameterType="java.lang.Integer">
    delete from tinstructorclass
    where id = #{id,jdbcType=INTEGER}
  </delete>
  <delete id="deleteByInstructorId" parameterType="java.lang.Short">
    delete from tinstructorclass
    where instructorID = #{instructorid,jdbcType=SMALLINT}
  </delete>
  <delete id="deleteByExample" parameterType="com.example.springboot_demo.entity.TinstructorclassExample">
    delete from tinstructorclass
    <if test="_parameter != null">
      <include refid="Example_Where_Clause" />
    </if>
  </delete>
  <insert id="insert" parameterType="com.example.springboot_demo.entity.Tinstructorclass" useGeneratedKeys="true" keyProperty="id">
    insert into tinstructorclass (instructorID, classId,
      academicYearId, term)
    values (#{instructorid,jdbcType=SMALLINT}, #{classid,jdbcType=INTEGER},
      #{academicyearid,jdbcType=TINYINT}, #{term,jdbcType=CHAR})
  </insert>
  <insert id="insertBath" parameterType="list">
    insert into tinstructorclass (instructorID, classId,academicYearId, term)
    values
    <foreach item="item" index="index" collection="list" open="(" separator="),(" close=")">
      #{item.instructorid,jdbcType=SMALLINT}, #{item.classid,jdbcType=INTEGER},
      #{item.academicyearid,jdbcType=TINYINT}, #{item.term,jdbcType=CHAR}
    </foreach>
  </insert>
  <insert id="insertSelective" parameterType="com.example.springboot_demo.entity.Tinstructorclass">
    insert into tinstructorclass
    <trim prefix="(" suffix=")" suffixOverrides=",">
      <if test="id != null">
        id,
      </if>
      <if test="instructorid != null">
        instructorID,
      </if>
      <if test="classid != null">
        classId,
      </if>
      <if test="academicyearid != null">
        academicYearId,
      </if>
      <if test="term != null">
        term,
      </if>
    </trim>
    <trim prefix="values (" suffix=")" suffixOverrides=",">
      <if test="id != null">
        #{id,jdbcType=INTEGER},
      </if>
      <if test="instructorid != null">
        #{instructorid,jdbcType=SMALLINT},
      </if>
      <if test="classid != null">
        #{classid,jdbcType=INTEGER},
      </if>
      <if test="academicyearid != null">
        #{academicyearid,jdbcType=TINYINT},
      </if>
      <if test="term != null">
        #{term,jdbcType=CHAR},
      </if>
    </trim>
  </insert>
  <select id="countByExample" parameterType="com.example.springboot_demo.entity.TinstructorclassExample" resultType="java.lang.Long">
    select count(*) from tinstructorclass
    <if test="_parameter != null">
      <include refid="Example_Where_Clause" />
    </if>
  </select>
  <update id="updateByExampleSelective" parameterType="map">
    update tinstructorclass
    <set>
      <if test="record.id != null">
        id = #{record.id,jdbcType=INTEGER},
      </if>
      <if test="record.instructorid != null">
        instructorID = #{record.instructorid,jdbcType=SMALLINT},
      </if>
      <if test="record.classid != null">
        classId = #{record.classid,jdbcType=INTEGER},
      </if>
      <if test="record.academicyearid != null">
        academicYearId = #{record.academicyearid,jdbcType=TINYINT},
      </if>
      <if test="record.term != null">
        term = #{record.term,jdbcType=CHAR},
      </if>
    </set>
    <if test="_parameter != null">
      <include refid="Update_By_Example_Where_Clause" />
    </if>
  </update>
  <update id="updateByExample" parameterType="map">
    update tinstructorclass
    set id = #{record.id,jdbcType=INTEGER},
      instructorID = #{record.instructorid,jdbcType=SMALLINT},
      classId = #{record.classid,jdbcType=INTEGER},
      academicYearId = #{record.academicyearid,jdbcType=TINYINT},
      term = #{record.term,jdbcType=CHAR}
    <if test="_parameter != null">
      <include refid="Update_By_Example_Where_Clause" />
    </if>
  </update>
  <update id="updateByPrimaryKeySelective" parameterType="com.example.springboot_demo.entity.Tinstructorclass">
    update tinstructorclass
    <set>
      <if test="instructorid != null">
        instructorID = #{instructorid,jdbcType=SMALLINT},
      </if>
      <if test="classid != null">
        classId = #{classid,jdbcType=INTEGER},
      </if>
      <if test="academicyearid != null">
        academicYearId = #{academicyearid,jdbcType=TINYINT},
      </if>
      <if test="term != null">
        term = #{term,jdbcType=CHAR},
      </if>
    </set>
    where id = #{id,jdbcType=INTEGER}
  </update>
  <update id="updateByPrimaryKey" parameterType="com.example.springboot_demo.entity.Tinstructorclass">
    update tinstructorclass
    set instructorID = #{instructorid,jdbcType=SMALLINT},
      classId = #{classid,jdbcType=INTEGER},
      academicYearId = #{academicyearid,jdbcType=TINYINT},
      term = #{term,jdbcType=CHAR}
    where id = #{id,jdbcType=INTEGER}
  </update>
  <resultMap id="queryClassMap" type="com.example.springboot_demo.entity.Tinstructorclass">
    <id column="classId" jdbcType="INTEGER" property="classId" />
    <result column="startTerm" jdbcType="CHAR" property="startTerm" />
    <result column="aymin" jdbcType="INTEGER" property="aymin" />
    <result column="aymax" jdbcType="INTEGER" property="aymax" />
    <result column="count" jdbcType="INTEGER" property="count" />
  </resultMap>
  <select id="listClassByEnterYearAndColleage"  resultMap="queryClassMap">
    select classId,term as startTerm,min(academicYearId) as aymin, max(academicYearId) as aymax,count(*) as count
    from tinstructorclass where
    <foreach item="item" index="index" collection="classes" open="cl.enteryear in (" separator="," close=")">
      #{item}
    </foreach>
    order by enteryear asc
  </select>
</mapper>